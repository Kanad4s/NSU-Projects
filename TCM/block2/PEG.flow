import lingo/pegcode/driver;
import grammar;

export {
    s2MyExpr(str: string) -> MyExpr {
		parsic(compilePegGrammar("#include grammar.lingo"), str, defaultPegActions);
	}

    MyExpr2s(myExpr : MyExpr) -> string {
        switch(myExpr : MyExpr) {
            Dbl(var) : d2s(var);
            Sum(l, r) : "(" + MyExpr2s(l) + "+" + MyExpr2s(r) + ")";
            Sub(l, r) : "(" + MyExpr2s(l) + "-" + MyExpr2s(r) + ")";
            Mul(l, r) : "(" + MyExpr2s(l) + "*" + MyExpr2s(r) + ")";
            Div(l, r) : "(" + MyExpr2s(l) + "/" + MyExpr2s(r) + ")";
            Pow(l, r) : "(" + MyExpr2s(l) + "^" + MyExpr2s(r) + ")";
            Neg(var) : "-" + MyExpr2s(var);
        }
    }

    calculateMyExpr(myExpr : MyExpr) -> double {
        switch(myExpr : MyExpr) {
            Dbl(var) : var;
            Sum(l, r) : calculateMyExpr(l) + calculateMyExpr(r);
            Sub(l, r) : calculateMyExpr(l) - calculateMyExpr(r);
            Mul(l, r) : calculateMyExpr(l) * calculateMyExpr(r);
            Div(l, r) : {
                divider = calculateMyExpr(r);
                if (divider == 0.0) {
                    println("Error division by zero!");
                    quit(1);
                }
                calculateMyExpr(l) / divider;
            };
            Pow(l, r) : dpow(calculateMyExpr(l), calculateMyExpr(r));
            Neg(var) : - calculateMyExpr(var);
        }
    }
}

main() {
    str: string = "(1+(4*7))";
    exp = getUrlParameter("exp");
    println(exp);
    myExpr : MyExpr = s2MyExpr(exp);
    println(myExpr);
    println(calculateMyExpr(myExpr));
    println(MyExpr2s(myExpr));
    quit(0)
}