import lingo/pegcode/driver;
import grammar;
import string;
import alg/algebr_2_rational;
import alg/algebr;
import alg/simplify;
import smartSimplify;

export {
    lingoGrammarOp : ref Maybe<[PegOp]> = ref None();

    chooseGrammar() {
        onlyOnce(lingoGrammarOp, \ -> { 
            mode = getUrlParameter("mode");   
            if (mode == "rpn") {
                println("Chose rpn grammar\n");
                compilePegGrammar("#include grammarRPN.lingo");
            } else {
                println("Chose simple grammar\n");
                compilePegGrammar("#include grammar.lingo");
        } 
        });
    }

    s2MyExpr(str: string) -> MyExpr {
		parsic(chooseGrammar(), str, defaultPegActions);
	}

    MyExpr2s(myExpr : MyExpr) -> string {
        switch(myExpr : MyExpr) {
            Dbl(var) : d2s(var);
            Sum(l, r) : "(" + MyExpr2s(l) + "+" + MyExpr2s(r) + ")";
            Sub(l, r) : "(" + MyExpr2s(l) + "-" + MyExpr2s(r) + ")";
            Mul(l, r) : "(" + MyExpr2s(l) + "*" + MyExpr2s(r) + ")";
            Div(l, r) : "(" + MyExpr2s(l) + "/" + MyExpr2s(r) + ")";
            Pow(l, r) : "(" + MyExpr2s(l) + "^" + MyExpr2s(r) + ")";
            Neg(var) : "-" + MyExpr2s(var);
        }
    }

    calculateMyExpr(myExpr : MyExpr) -> double {
        switch(myExpr : MyExpr) {
            Dbl(var) : var;
            Sum(l, r) : calculateMyExpr(l) + calculateMyExpr(r);
            Sub(l, r) : calculateMyExpr(l) - calculateMyExpr(r);
            Mul(l, r) : calculateMyExpr(l) * calculateMyExpr(r);
            Div(l, r) : {
                divider = calculateMyExpr(r);
                if (divider == 0.0) {
                    println("Error division by zero!");
                    quit(1);
                }
                calculateMyExpr(l) / divider;
            };
            Pow(l, r) : dpow(calculateMyExpr(l), calculateMyExpr(r));
            Neg(var) : - calculateMyExpr(var);
        }
    }
}

main() {
    //str: string = "(1+(4*7))";
    str: string = "((1/1000000000)+(1/1000000000))";
    exp = getUrlParameter("exp");
    mode = getUrlParameter("mode");
    if (mode == "rat") {
        //println(s2alg(exp));
        //println(simplify(s2alg(exp), 1, 2, 2));
        //println("ratFunc2s:\n" + ratFunc2s(alg2rat(s2alg(exp))));
        println(smartSimplify(exp));
    } else {
        if (exp != "") {
            println("Parse: " + exp);
            myExpr : MyExpr = s2MyExpr(exp);
            println(myExpr);
            println(calculateMyExpr(myExpr));
            println(MyExpr2s(myExpr));
        } else {
            println("Parse: " + str);
            myExpr : MyExpr = s2MyExpr(str);
            println(myExpr);
            println(calculateMyExpr(myExpr));
            println(MyExpr2s(myExpr));
        }
    }
    quit(0)
}