import grammar;
import lingo/pegcode/driver;
import string;

export {

    getExprArgs(e : MyExpr) -> [MyExpr] {
        switch (e) {
            Var(a): [Var(a)];
            Dbl(a): [Dbl(a)];
            Sum(l, r): [l, r];
            Sub(l, r): [l, r];
            Mul(l, r): [l, r];
            Div(l, r): [l, r];
            Pow(l, r): [l, r];
            Neg(a): [a];
        }
    }

    getExprType(e : MyExpr) -> string {
        switch (e) {
            Var(a): "var";
            Dbl(a): "dbl";
            Sum(l, r): "+";
            Sub(l, r): "-";
            Mul(l, r): "*";
            Div(l, r): "/";
            Pow(l, r): "^";
            Neg(a): "neg";
        }
    }

    argToDbl(e: MyExpr) -> double {
        switch(e) {
            Dbl(a): a;
            default: 0.0;
        }
    }

    getVarName(e: MyExpr) -> string {
        switch(e: MyExpr) {
            Var(a): a;
            Pow(l, r): getVarName(l);
            default: "";
        }    
    }

    mysimplify(e: MyExpr) -> MyExpr {
        switch(e) {
            Sum(l, r) : {
                l1 = mysimplify(l);
                r1 = mysimplify(r);

                if (l1 == Dbl(0.0)) {
                    r1;
                } 
                else if (r1 == Dbl(0.0)) {
                    l1;
                } else if (getExprType(l1) == "var" && getExprType(r1) == "var" && getExprArgs(l1) == getExprArgs(r1)) {
                    Mul(Dbl(2.0), l1);
                }
                else Sum(l1, r1);
            }
            Sub(l, r) : {
                l1 = mysimplify(l);
                r1 = mysimplify(r);

                if (r1 == Dbl(0.0)) {
                    l1;
                }
                else if (l1 == Dbl(0.0)) {
                    Neg(r1);
                }
                else if (l1 == r1) {
                    Dbl(0.0);
                }
                else if (getExprType(l1) == "dbl" && getExprType(r1) == "dbl") {
                    s2MyExprs(d2s(calc(Sub(l1, r1))));
                }
                else Sub(l1, r1);
            }
            Mul(l, r) : {
                l1 = mysimplify(l);
                r1 = mysimplify(r);

                if (l1 == Dbl(0.0) || r1 == Dbl(0.0)) {
                    Dbl(0.0);
                } 
                else if (l1 == Dbl(1.0)) {
                    r1;
                }
                else if (r1 == Dbl(1.0)) {
                    l1;
                }
                else if (l1 == Dbl(-.01)) {
                    Neg(r1);
                }
                else if (r1 == Dbl(-.01)) {
                    Neg(l1);
                }
                else if (l1 == r1) {
                    Pow(l1, Dbl(2.0));
                }
                else if (getExprType(l1) == "^" && getExprType(r1) == "var" && getVarName(l1) == getVarName(r1)) {
                    mysimplify(Pow(r1, Dbl(argToDbl(getExprArgs(l1)[1])+1.0)));
                }
                else if (getExprType(l1) == "var" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                    mysimplify(Pow(l1, Dbl(argToDbl(getExprArgs(r1)[1])+1.0)));
                }
                else if (getExprType(l1) == "^" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                    mysimplify(Pow(getExprArgs(l1)[0], Dbl(argToDbl(getExprArgs(l1)[1])+argToDbl(getExprArgs(r1)[1]))));
                }
                else Mul(l1, r1);
            }
            Div(l, r) : {
                l1 = mysimplify(l);
                r1 = mysimplify(r);

                if (l1 == Dbl(0.0)) {
                    Dbl(0.0);
                }
                else if (r1 == Dbl(1.0)) {
                    l1;
                }
                else if (l1 == r1) {
                    Dbl(1.0);
                }
                else if (getExprType(l1) == "var" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                    if (argToDbl(getExprArgs(r1)[1]) == 2.0) {
                        Div(Dbl(1.0), l1);
                    } 
                    else {
                        mysimplify(Div(Dbl(1.0), Pow(l1, Dbl(argToDbl(getExprArgs(r1)[1])-1.0))));
                    }
                }
                else if (getExprType(l1) == "^" && getExprType(r1) == "var" && getVarName(l1) == getVarName(r1)) {
                    mysimplify(Pow(r1, Dbl(argToDbl(getExprArgs(l1)[1])-1.0)));
                }
                else if (getExprType(l1) == "^" && getExprType(r1) == "^" && getVarName(l1) == getVarName(r1)) {
                    if (argToDbl(getExprArgs(l1)[1]) >= argToDbl(getExprArgs(r1)[1])) {
                        mysimplify(Pow(getExprArgs(l1)[0], Dbl(argToDbl(getExprArgs(l1)[1])-argToDbl(getExprArgs(r1)[1]))));
                    } else {
                        mysimplify(Div(Dbl(1.0), Pow(getExprArgs(l1)[0], Dbl(argToDbl(getExprArgs(r1)[1])-argToDbl(getExprArgs(l1)[1])))));
                    }
                    
                }
                //else if (getExprType(l1) == "dbl" && getExprType(r1) == "dbl") {
                //    println(findNod(calc(l1), calc(r1)));    
                //    Div(l1, r1);    
                //}
                else Div(l1, r1);
            }
            Pow(l, r) : {
                l1 = mysimplify(l);
                r1 = mysimplify(r);

                if (r1 == Dbl(0.0)) {
                    Dbl(1.0);
                }
                else if (r1 == Dbl(1.0)) {
                    l1;
                }
                else if (l1 == Dbl(0.0)) {
                    Dbl(0.0);
                }
                else if (l1 == Dbl(1.0)) {
                    Dbl(1.0);
                } 
                else if (getExprType(r1) == "neg") {
                    Div(Dbl(1.0), Pow(getExprArgs(l1)[0], Dbl(argToDbl(getExprArgs(r1)[0]))));
                }
                else Pow(l1, r1);
            }
            default : e
        }
    }

    s2MyExprs(str: string) -> MyExpr {
        parsic(compilePegGrammar("#include grammar.lingo"), str, defaultPegActions);
    }

    calc(myExpr : MyExpr) -> double {
    switch(myExpr : MyExpr) {
        Dbl(var) : var;
        Var(x) : 0.0;
        Sum(l, r) : calc(l) + calc(r);
        Sub(l, r) : calc(l) - calc(r);
        Mul(l, r) : calc(l) * calc(r);
        Div(l, r) : {
            divider = calc(r);
            if (divider == 0.0) {
                println("Error division by zero!");
                quit(1);
            }
            calc(l) / divider;
        };
        Pow(l, r) : dpow(calc(l), calc(r));
        Neg(var) : - calc(var);
    }
}
}